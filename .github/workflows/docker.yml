# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test Docker Commands

on:
  push:
    branches: [ 'TestDockerInGithubActions' ]

jobs:
  dind:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.6'] #3.8.6
    container:
      image: docker:dind
      options: --user root # because github actions use github:githubgp
    steps:
      - name: Add the Github user to the DinD host container
        run: |
          apk update
          apk add -q net-tools shadow sudo bash
          groupadd -g 1000 githubgp
          adduser -G githubgp -u 1001 -D -H -h /github/home github
          id -G root
          usermod -a -G githubgp root
          id -G root
          chmod -R u=rwx,go=rx /github/home
          HOME=/github/home
          export HOME=$HOME
          #echo "{path}" >> $GITHUB_PATH
          echo "HOME=$HOME" >> $GITHUB_ENV

      ## sadly, this Github action only installs python on the Ubuntu build HOST
      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: ${{ matrix.python-version }}
      ## the context below is within an ALPINE DOCKER container, so Python with specific version must be installed

      #- uses: actions/checkout@v2
      - name: Get Repo Sources
        shell: bash
        run: |
          whoami
          mkdir -p neoload-cli && cd neoload-cli \
            && git init && git remote add origin https://github.com/$GITHUB_REPOSITORY.git \
            && git fetch origin $GITHUB_REF && git reset --hard FETCH_HEAD

          git branch

      - name: Install Python via APK
        run: |
          pwd
          neoload-cli/examples/docker/alpine_install_python_${{ matrix.python-version }}.sh
      # - name: Install Python via APK
      #   run: |
      #     apk add -q curl \
      #           ca-certificates \
      #           bash \
      #           git \
      #           openssl-dev \
      #           readline-dev \
      #           bzip2-dev \
      #           zlib-dev \
      #           ncurses-dev \
      #           linux-headers \
      #           build-base
      #
      #     curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer -o $HOME/pyenv-installer && \
      #           touch $HOME/.bashrc && \
      #           /bin/ln -s $HOME/.bashrc $HOME/.bash_profile && \
      #           /bin/bash $HOME/pyenv-installer && \
      #           rm $HOME/pyenv-installer && \
      #           echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $HOME/.bash_profile && \
      #           echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> $HOME/.bash_profile && \
      #           echo 'eval "$(pyenv init -)"' >> $HOME/.bash_profile && \
      #           echo 'eval "$(pyenv virtualenv-init -)"' >> $HOME/.bash_profile
      #
      #     PYENV_ROOT=$HOME/.pyenv && export PYENV_ROOT=$PYENV_ROOT
      #     echo "::set-env name=PYENV_ROOT::$PYENV_ROOT"
      #     PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH && export PATH=$PATH
      #     echo "::set-env name=PATH::$PATH"
      #
      #     pyenv install -v ${{ matrix.python-version }}
      #
      #     ln -s $PYENV_ROOT/bin/python3 $PYENV_ROOT/bin/python
      #
      #     ls -latr $PYENV_ROOT/bin
      #
      #     #apk add -q python3-dev gcc libc-dev py3-pip git

      - name: Verify Python Installation
        shell: bash
        run: |
          echo "$pythonLocation" >> $GITHUB_PATH
          whoami
          echo "pythonLocation: $pythonLocation"
          echo "GITHUB_PATH: $GITHUB_PATH"
          echo "PATH: $PATH"
          which python3
          which python
          which pip
          # # prior=$(pwd)
          # # cd $pythonLocation && ln -s /usr/bin/python3 python
          # # cd $prior
          #
          # echo "PATH: $PATH"
          # echo "/usr/bin" && ls -latr /usr/bin
          # echo "/__t" && ls -latr /__t
          # echo "/__t/Python" && ls -latr /__t/Python
          # echo "pythonLocation" && ls -latr $pythonLocation
          # echo "pythonLocation/bin" && ls -latr $pythonLocation/bin
          #
          # ln -s $(which python) /usr/bin/python

      - name: Verify Prerequisites
        shell: bash
        run: |
          whoami

          echo "Python at:"
          which python

          echo "Checking Python version"

          # cat $pythonLocation/bin/python3

          python3 --version
          python --version
          docker --version
          docker ps

      - name: Install NeoLoad CLI from Branch
        shell: bash
        run: |
          bash
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        shell: bash
        run: |
          neoload --version

          PYTHONPATH="neoload" COVERAGE_FILE=.coverage.unit coverage3 run -m pytest
          PYTHONPATH="neoload" COVERAGE_FILE=.coverage.live coverage3 run -m pytest -v -x -m "makelivecalls" --makelivecalls --token ${{ secrets.NLWEB_TOKEN }} --url ${{ secrets.NLWEB_API_URL }} --workspace CLI
          coverage3 combine
          coverage3 xml
