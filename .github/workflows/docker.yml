# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test Docker Commands

on:
  push:
    branches: [ 'TestDockerInGithubActions' ]
  workflow_dispatch:
    inputs:
      zone:
        description: 'Zone'
        required: true
        default: 'defaultzone'
      tags:
        description: 'Test docker commands'

jobs:
  dind:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.6'] #3.8.6
    container:
      image: docker:dind
    steps:
      - name: Add the Github user to the DinD host container
        run: |
          apk update
          apk add -q net-tools shadow sudo
          groupadd -g 116 githubgrp
          adduser -G githubgrp -u 1001 -D -H -h /github/home github
          chmod -R u=rwx,go=rx /github/home
          HOME=/github/home
          export HOME=$HOME
          echo "::set-env name=HOME::$HOME"

      ## sadly, this Github action only installs python on the Ubuntu build HOST
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      ## the context below is within an ALPINE DOCKER container, so Python with specific version must be installed

      # - name: Install Python via APK
      #   run: |
      #     apk add -q curl \
      #           ca-certificates \
      #           bash \
      #           git \
      #           openssl-dev \
      #           readline-dev \
      #           bzip2-dev \
      #           zlib-dev \
      #           ncurses-dev \
      #           linux-headers \
      #           build-base
      #
      #     curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer -o $HOME/pyenv-installer && \
      #           touch $HOME/.bashrc && \
      #           /bin/ln -s $HOME/.bashrc $HOME/.bash_profile && \
      #           /bin/bash $HOME/pyenv-installer && \
      #           rm $HOME/pyenv-installer && \
      #           echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $HOME/.bash_profile && \
      #           echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> $HOME/.bash_profile && \
      #           echo 'eval "$(pyenv init -)"' >> $HOME/.bash_profile && \
      #           echo 'eval "$(pyenv virtualenv-init -)"' >> $HOME/.bash_profile
      #
      #     PYENV_ROOT=$HOME/.pyenv && export PYENV_ROOT=$PYENV_ROOT
      #     echo "::set-env name=PYENV_ROOT::$PYENV_ROOT"
      #     PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH && export PATH=$PATH
      #     echo "::set-env name=PATH::$PATH"
      #
      #     pyenv install -v ${{ matrix.python-version }}
      #
      #     ln -s $PYENV_ROOT/bin/python3 $PYENV_ROOT/bin/python
      #
      #     ls -latr $PYENV_ROOT/bin
      #
      #     #apk add -q python3-dev gcc libc-dev py3-pip git

      - name: Verify Python Installation
        run: |
          whoami
          echo "PYENV_ROOT: $PYENV_ROOT"
          echo "PATH: $PATH"
          which python3
          which python
          which pip
          # prior=$(pwd)
          # cd /usr/local/bin && ln -s /usr/bin/python3 python
          # cd $prior

      - name: Verify Prerequisites
        run: |
          echo "PATH: $PATH"
          whoami
          ls -latr $pythonLocation
          echo "Listing version-specific"
          ls -latr /__t/Python/3.6.13/x64/bin
          python --version
          docker --version
          docker ps

      #- uses: actions/checkout@v2

      - name: Install CLI
        run: |
          #git clone --branch $GITHUB_REF https://github.com/$GITHUB_REPOSITORY.git && cd neoload-cli
          mkdir -p neoload-cli && cd neoload-cli \
            && git init && git remote add origin https://github.com/$GITHUB_REPOSITORY.git \
            && git fetch origin $GITHUB_REF && git reset --hard FETCH_HEAD

          git branch

      - name: Install dependencies
        run: |
          bash
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          neoload --version

          PYTHONPATH="neoload" COVERAGE_FILE=.coverage.unit coverage3 run -m pytest
          PYTHONPATH="neoload" COVERAGE_FILE=.coverage.live coverage3 run -m pytest -v -x -m "makelivecalls" --makelivecalls --token ${{ secrets.NLWEB_TOKEN }} --url ${{ secrets.NLWEB_API_URL }} --workspace CLI
          coverage3 combine
          coverage3 xml
